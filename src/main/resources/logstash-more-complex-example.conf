input {
   tcp {
    host => "127.0.0.1"
    port => 10514
    codec => "json"
    type => "rsyslog"
  }
}
filter {
    # filter messages on only messages which are from kypo2-training programname and contains AUDIT in the message
    if [programname] != "kypo2-training" {drop{}}
    if ("AUDIT " not in [message]) {drop{}}
    # match json object data which represents the audit event object and save them to auditmessage field
    grok {
        match => { "message" => "AUDIT %{DATA:data} --- %{GREEDYDATA:auditmessage}" }
    }
    json {
	source => "auditmessage"
	target => "message"
    }
    # retrieve elements from json to compose Elasticsearch index correctly
    mutate {
	add_field => { "[@metadata][eseventtype]" => "%{[message][type]}" }
	add_field => { "[@metadata][trainingdefinitionid]" => "%{[message][training_definition_id]}"}
        add_field => { "[@metadata][traininginstanceid]" => "%{[message][training_instance_id]}"}    
    }
    # index in Elasticsearch must be lowercase, so we need to lowercase it
    mutate {
	lowercase => [ "[@metadata][eseventtype]" ]
    }
    # add all Syslog fields to syslog object
    mutate {
        add_field => { "[syslog][programname]" => "%{programname}"}
        add_field => { "[syslog][sysloghost]" => "%{sysloghost}"}
        add_field => { "[syslog][procid]" => "%{procid}"}
        add_field => { "[syslog][host]" => "%{host}"}
        add_field => { "[syslog][facility]" => "%{facility}"}
        add_field => { "[syslog][type]" => "%{type}"}
        add_field => { "[syslog][@version]" => "%{@version}"}
        add_field => { "[syslog][severity]" => "%{severity}"}
        add_field => { "[syslog][@timestamp]" => "%{@timestamp}"}
    }
    # remove Syslog fields (these are included in syslog object now)
    mutate {
       	remove_field => [  "data", "auditmessage", "programname", "sysloghost", "procid", "host", "facility", "type", "@version", "severity", "@timestamp" ]
    }
    # here, we eliminate top-level field message and set all nested fields of the message as top-level fields
    ruby { 
        code => "
            begin
                message= event.get('message')
                if message!= NIL
                    message.keys.each{|key| 
                        event.set(key, message[key]) 
                    } 
                    event.remove('message')
                end
            end
        "
    }
}
output {
	elasticsearch {
		hosts => [ "localhost:9200" ]
		index => "kypo3.%{[@metadata][eseventtype]}_evt.definition=%{[@metadata][trainingdefinitionid]}.instance=%{[@metadata][traininginstanceid]}"    
		codec => json
	} 
}
